// FIX 1: Completely rebuild the history screen with correct layout
// This function creates a new history screen with the exact same layout as the send screen
function rebuildHistoryScreen() {
  console.log("Rebuilding history screen with correct layout...");
  
  // Get existing history screen
  const existingScreen = document.getElementById('history-screen');
  if (existingScreen) {
    // Remove it completely to start fresh
    existingScreen.parentNode.removeChild(existingScreen);
  }
  
  // Create new history screen
  const historyScreen = document.createElement('div');
  historyScreen.id = 'history-screen';
  historyScreen.className = 'screen hidden';
  
  // Match the exact layout of the send screen but with history content
  historyScreen.innerHTML = `
    <div class="screen-header">
      <button class="back-button" aria-label="Go back">
        <i class="fas fa-arrow-left"></i>
      </button>
      <h2>History</h2>
      <div class="wallet-selector-small">
        <span class="wallet-name-small">Mnemonic 1</span>
        <i class="fas fa-chevron-down"></i>
      </div>
    </div>
    
    <!-- All Networks dropdown -->
    <div class="networks-filter">
      <div class="all-networks">
        All Networks <i class="fas fa-chevron-down"></i>
      </div>
    </div>
    
    <div class="history-tabs">
      <div class="history-tab active" data-tab="all">All</div>
      <div class="history-tab" data-tab="send">Sent</div>
      <div class="history-tab" data-tab="receive">Received</div>
    </div>
    
    <div id="history-transaction-list" class="history-transaction-list">
      <!-- Transactions will be dynamically added here -->
      
      <!-- Example transaction item for layout reference -->
      <div class="transaction-item transaction-receive">
        <div class="transaction-token-icon">
          <img src="https://cryptologos.cc/logos/polygon-matic-logo.png" alt="POL">
        </div>
        <div class="transaction-info">
          <div class="transaction-type">Received POL</div>
          <div class="transaction-date">2025-03-13 01:45</div>
        </div>
        <div class="transaction-amount">
          <div class="transaction-value positive">+1513.70279621439 POL</div>
          <div class="transaction-usd">$302.74</div>
        </div>
      </div>
      
      <!-- Explorer link -->
      <div class="check-explorer">
        Cannot find your transaction? <a href="#" id="check-explorer-link">Check explorer</a>
      </div>
    </div>
    
    <!-- Empty state -->
    <div class="no-history hidden">
      <div class="no-history-icon">
        <img src="https://i.ibb.co/p6nYxhpw/Screenshot-20250327-203752-Trust-Wallet.jpg" alt="No transactions">
      </div>
      <p>No transactions found</p>
    </div>
  `;
  
  // Add to the DOM
  document.querySelector('.app-container').appendChild(historyScreen);
  
  // Apply specific styling to match send screen
  const styleTag = document.createElement('style');
  styleTag.textContent = `
    /* Updated History Screen Styles to match Send Screen */
    #history-screen {
      display: none;
      flex-direction: column;
      background-color: white;
    }
    
    #history-screen .screen-header {
      display: flex;
      align-items: center;
      padding: 16px;
      background-color: white;
    }
    
    #history-screen .back-button {
      width: 32px;
      height: 32px;
      display: flex;
      justify-content: center;
      align-items: center;
      color: #1A2024;
      background: transparent;
      border: none;
    }
    
    #history-screen h2 {
      flex: 1;
      text-align: center;
      font-size: 18px;
      font-weight: 600;
      margin: 0;
    }
    
    .wallet-selector-small {
      display: flex;
      align-items: center;
      padding: 6px 12px;
      background-color: #F5F5F5;
      border-radius: 16px;
      cursor: pointer;
    }
    
    .wallet-name-small {
      font-size: 14px;
      color: #1A2024;
      margin-right: 4px;
    }
    
    .networks-filter {
      padding: 8px 16px;
      background-color: #F5F5F5;
      display: flex;
      align-items: center;
    }
    
    .all-networks {
      display: flex;
      align-items: center;
      background-color: #FFFFFF;
      border-radius: 16px;
      padding: 6px 12px;
      font-size: 12px;
      color: #1A2024;
      cursor: pointer;
      box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    }
    
    .all-networks i {
      margin-left: 4px;
      font-size: 10px;
      color: #8A939D;
    }
    
    .history-tabs {
      display: flex;
      background-color: #FFFFFF;
      border-bottom: 1px solid #F5F5F5;
    }
    
    .history-tab {
      flex: 1;
      text-align: center;
      padding: 12px 0;
      font-size: 14px;
      color: #8A939D;
      cursor: pointer;
      position: relative;
    }
    
    .history-tab.active {
      color: #3375BB;
      font-weight: 500;
    }
    
    .history-tab.active::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 2px;
      background-color: #3375BB;
    }
    
    .history-transaction-list {
      flex: 1;
      overflow-y: auto;
      background-color: #FFFFFF;
      padding-bottom: 80px;
    }
    
    .transaction-item {
      display: flex;
      align-items: center;
      padding: 16px;
      border-bottom: 1px solid #F5F5F5;
      cursor: pointer;
    }
    
    .transaction-token-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: rgba(51, 117, 187, 0.1);
      display: flex;
      justify-content: center;
      align-items: center;
      margin-right: 16px;
    }
    
    .transaction-token-icon img {
      width: 24px;
      height: 24px;
      object-fit: contain;
    }
    
    .transaction-info {
      flex: 1;
    }
    
    .transaction-type {
      font-size: 15px;
      font-weight: 500;
      color: #1A2024;
      margin-bottom: 4px;
    }
    
    .transaction-date {
      font-size: 13px;
      color: #8A939D;
    }
    
    .transaction-amount {
      text-align: right;
    }
    
    .transaction-value {
      font-size: 15px;
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .transaction-value.positive {
      color: #3375BB;
    }
    
    .transaction-value.negative {
      color: #EB5757;
    }
    
    .transaction-usd {
      font-size: 13px;
      color: #8A939D;
    }
    
    .check-explorer {
      text-align: center;
      padding: 24px 16px;
      font-size: 14px;
      color: #8A939D;
    }
    
    .check-explorer a {
      color: #3375BB;
      text-decoration: none;
    }
    
    .no-history {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      padding: 24px;
      text-align: center;
    }
    
    .no-history-icon {
      width: 96px;
      height: 96px;
      margin-bottom: 16px;
    }
    
    .no-history-icon img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      opacity: 0.5;
    }
    
    .no-history p {
      font-size: 16px;
      color: #8A939D;
    }
  `;
  
  document.head.appendChild(styleTag);
  
  // Set up event handlers
  setupHistoryEvents();
  
  console.log("History screen rebuilt with correct layout");
}

// Set up all event handlers for the history screen
function setupHistoryEvents() {
  const historyScreen = document.getElementById('history-screen');
  if (!historyScreen) return;
  
  // Back button
  const backButton = historyScreen.querySelector('.back-button');
  if (backButton) {
    backButton.addEventListener('click', function() {
      historyScreen.style.display = 'none';
      historyScreen.classList.add('hidden');
      
      const walletScreen = document.getElementById('wallet-screen');
      if (walletScreen) {
        walletScreen.style.display = 'flex';
        walletScreen.classList.remove('hidden');
      }
    });
  }
  
  // Tab switching
  const historyTabs = historyScreen.querySelectorAll('.history-tab');
  historyTabs.forEach(tab => {
    tab.addEventListener('click', function() {
      // Remove active class from all tabs
      historyTabs.forEach(t => t.classList.remove('active'));
      
      // Add active class to clicked tab
      this.classList.add('active');
      
      // Get tab type and apply filter
      const tabType = this.getAttribute('data-tab');
      console.log(`Switched to ${tabType} tab`);
      
      // If you have a transaction filtering function, call it here
      if (typeof updateHistoryTransactionList === 'function') {
        updateHistoryTransactionList(tabType);
      }
    });
  });
  
  // Wallet selector
  const walletSelector = historyScreen.querySelector('.wallet-selector-small');
  if (walletSelector) {
    walletSelector.addEventListener('click', function() {
      const walletName = walletSelector.querySelector('.wallet-name-small');
      if (!walletName) return;
      
      // Cycle through wallets
      if (walletName.textContent.includes('1')) {
        walletName.textContent = 'Mnemonic 2';
        window.activeWallet = 'secondary';
      } else if (walletName.textContent.includes('2')) {
        walletName.textContent = 'Mnemonic 3';
        window.activeWallet = 'business';
      } else {
        walletName.textContent = 'Mnemonic 1';
        window.activeWallet = 'main';
      }
      
      // Update transaction list if function exists
      if (typeof updateHistoryTransactionList === 'function') {
        updateHistoryTransactionList('all');
      }
    });
  }
  
  // Explorer link
  const explorerLink = historyScreen.querySelector('#check-explorer-link');
  if (explorerLink) {
    explorerLink.addEventListener('click', function(e) {
      e.preventDefault();
      
      // If you have an explorer overlay function, call it here
      const explorerOverlay = document.getElementById('explorer-overlay');
      if (explorerOverlay) {
        explorerOverlay.style.display = 'flex';
        explorerOverlay.classList.remove('hidden');
      }
    });
  }
}

// FIX 2: Completely rebuild the receive screen to fix errors
function rebuildReceiveScreen() {
  console.log("Rebuilding receive screen...");
  
  // Remove existing screen if present
  const existingScreen = document.getElementById('receive-screen');
  if (existingScreen) {
    existingScreen.parentNode.removeChild(existingScreen);
  }
  
  // Create fresh receive screen
  const receiveScreen = document.createElement('div');
  receiveScreen.id = 'receive-screen';
  receiveScreen.className = 'screen hidden';
  
  // Use the same layout as seen in the screenshots
  receiveScreen.innerHTML = `
    <div class="screen-header">
      <button class="back-button" aria-label="Go back">
        <i class="fas fa-arrow-left"></i>
      </button>
      <h2>Receive</h2>
      <div class="placeholder-icon"></div>
    </div>
    
    <!-- Bitcoin Warning Banner -->
    <div id="bitcoin-warning" class="bitcoin-warning hidden">
      <div class="bitcoin-warning-content">
        <i class="fas fa-exclamation-circle"></i>
        <div class="bitcoin-warning-text">
          <p>Only send Bitcoin (BTC) assets to this address. Other assets will be lost forever.</p>
        </div>
      </div>
    </div>
    
    <div class="receive-content">
      <div class="token-selection">
        <div class="token-icon-large">
          <img id="receive-token-icon" src="https://cryptologos.cc/logos/bitcoin-btc-logo.png" alt="BTC">
        </div>
        <div class="token-label">
          <span id="receive-token-name">BTC</span>
          <span class="token-network">BITCOIN</span>
        </div>
      </div>
      
      <!-- QR code container -->
      <div class="qr-code-container">
        <svg width="250" height="250" viewBox="0 0 250 250" xmlns="http://www.w3.org/2000/svg">
          <!-- White background -->
          <rect width="250" height="250" fill="white"/>
          
          <!-- Border -->
          <rect x="10" y="10" width="230" height="230" stroke="black" stroke-width="2" fill="none"/>
          
          <!-- Fake QR code pattern -->
          <g fill="black">
            <!-- Position markers (corners) -->
            <rect x="30" y="30" width="40" height="40"/>
            <rect x="180" y="30" width="40" height="40"/>
            <rect x="30" y="180" width="40" height="40"/>
            
            <!-- Inner white squares for position markers -->
            <rect x="40" y="40" width="20" height="20" fill="white"/>
            <rect x="190" y="40" width="20" height="20" fill="white"/>
            <rect x="40" y="190" width="20" height="20" fill="white"/>
            
            <!-- Random QR code pattern squares -->
            <rect x="90" y="30" width="10" height="10"/>
            <rect x="110" y="30" width="10" height="10"/>
            <rect x="140" y="30" width="10" height="10"/>
            <rect x="30" y="90" width="10" height="10"/>
            <rect x="50" y="90" width="10" height="10"/>
            <rect x="90" y="90" width="10" height="10"/>
            <rect x="120" y="90" width="10" height="10"/>
            <rect x="150" y="90" width="10" height="10"/>
            <rect x="180" y="90" width="10" height="10"/>
            <rect x="30" y="110" width="10" height="10"/>
            <rect x="60" y="110" width="10" height="10"/>
            <rect x="80" y="110" width="10" height="10"/>
            <rect x="130" y="110" width="10" height="10"/>
          </g>
        </svg>
      </div>
      
      <div class="wallet-address" id="wallet-address">
        bc1qltfhpkgqw6ug6vtw76z2uftwy7jtmr6vfsxp4p
      </div>
      
      <div class="receive-actions">
        <div class="action-round-button">
          <i class="fas fa-copy"></i>
          <span>Copy</span>
        </div>
        <div class="action-round-button">
          <i class="fas fa-share-alt"></i>
          <span>Share</span>
        </div>
      </div>
    </div>
  `;
  
  // Add the new screen to the DOM
  document.querySelector('.app-container').appendChild(receiveScreen);
  
  // Apply specific styling for receive screen
  const styleTag = document.createElement('style');
  styleTag.textContent = `
    /* Receive Screen Styles */
    #receive-screen {
      display: none;
      flex-direction: column;
      background-color: white;
    }
    
    #receive-screen .screen-header {
      display: flex;
      align-items: center;
      padding: 16px;
    }
    
    #receive-screen .back-button {
      width: 32px;
      height: 32px;
      display: flex;
      justify-content: center;
      align-items: center;
      color: #1A2024;
      background: transparent;
      border: none;
    }
    
    #receive-screen h2 {
      flex: 1;
      text-align: center;
      font-size: 18px;
      font-weight: 600;
      margin: 0;
    }
    
    #receive-screen .placeholder-icon {
      width: 32px;
    }
    
    .bitcoin-warning {
      background-color: #FEF9E7;
      padding: 8px 16px;
      margin-bottom: 8px;
    }
    
    .bitcoin-warning-content {
      display: flex;
      align-items: flex-start;
    }
    
    .bitcoin-warning-content i {
      color: #D4AC0D;
      margin-right: 8px;
      font-size: 16px;
      margin-top: 2px;
    }
    
    .bitcoin-warning-text p {
      font-size: 12px;
      color: #1A2024;
      margin: 0;
      line-height: 1.4;
    }
    
    .receive-content {
      padding: 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .token-selection {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 24px;
    }
    
    .token-icon-large {
      width: 40px;
      height: 40px;
      position: relative;
    }
    
    .token-icon-large img {
      width: 100%;
      height: 100%;
      border-radius: 50%;
    }
    
    .token-label {
      display: flex;
      flex-direction: column;
    }
    
    .token-label #receive-token-name {
      font-size: 16px;
      font-weight: 600;
      color: #1A2024;
    }
    
    .token-label .token-network {
      font-size: 12px;
      color: #8A939D;
    }
    
    .qr-code-container {
      background-color: white;
      padding: 16px;
      border-radius: 16px;
      margin-bottom: 24px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .wallet-address {
      font-size: 14px;
      color: #1A2024;
      margin-bottom: 32px;
      text-align: center;
      word-break: break-all;
      max-width: 280px;
      background-color: #F5F5F5;
      padding: 16px;
      border-radius: 8px;
    }
    
    .receive-actions {
      display: flex;
      justify-content: space-around;
      width: 100%;
      margin-bottom: 80px;
    }
    
    .action-round-button {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
    }
    
    .action-round-button i {
      width: 56px;
      height: 56px;
      border-radius: 50%;
      background-color: #F5F5F5;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 20px;
      color: #1A2024;
    }
    
    .action-round-button span {
      font-size: 14px;
      color: #1A2024;
    }
  `;
  
  document.head.appendChild(styleTag);
  
  // Set up event handlers
  setupReceiveEvents();
  
  console.log("Receive screen rebuilt");
}

// Set up event handlers for receive screen
function setupReceiveEvents() {
  const receiveScreen = document.getElementById('receive-screen');
  if (!receiveScreen) return;
  
  // Back button
  const backButton = receiveScreen.querySelector('.back-button');
  if (backButton) {
    backButton.addEventListener('click', function() {
      receiveScreen.style.display = 'none';
      receiveScreen.classList.add('hidden');
      
      const walletScreen = document.getElementById('wallet-screen');
      if (walletScreen) {
        walletScreen.style.display = 'flex';
        walletScreen.classList.remove('hidden');
      }
    });
  }
  
  // Copy button
  const copyButton = receiveScreen.querySelector('.fa-copy').parentElement;
  if (copyButton) {
    copyButton.addEventListener('click', function() {
      const walletAddress = document.getElementById('wallet-address');
      if (walletAddress) {
        // Copy to clipboard
        const textToCopy = walletAddress.textContent.trim();
        
        // Use modern clipboard API
        navigator.clipboard.writeText(textToCopy)
          .then(() => {
            alert('Address copied to clipboard');
          })
          .catch(() => {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = textToCopy;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert('Address copied to clipboard');
          });
      }
    });
  }
  
  // Share button
  const shareButton = receiveScreen.querySelector('.fa-share-alt').parentElement;
  if (shareButton) {
    shareButton.addEventListener('click', function() {
      const walletAddress = document.getElementById('wallet-address');
      if (walletAddress) {
        // Share functionality - this is just a placeholder
        alert('Sharing address: ' + walletAddress.textContent.trim());
      }
    });
  }
}

// FIX 3: Update showReceiveScreen function to work with the new screen
function showReceiveScreen(tokenId) {
  console.log('Showing receive screen for token:', tokenId);
  
  // Get the receive screen
  const receiveScreen = document.getElementById('receive-screen');
  if (!receiveScreen) {
    console.error('Receive screen not found, rebuilding...');
    rebuildReceiveScreen();
    
    // Try again after rebuilding
    const newReceiveScreen = document.getElementById('receive-screen');
    if (!newReceiveScreen) {
      console.error('Failed to rebuild receive screen');
      return;
    }
  }
  
  // Ensure wallet data exists
  if (!window.currentWalletData || !window.currentWalletData[window.activeWallet]) {
    console.error('Wallet data not available');
    return;
  }
  
  // Find the token in the wallet data
  const tokens = window.currentWalletData[window.activeWallet].tokens;
  const token = tokens.find(t => t.id === tokenId) || tokens.find(t => t.id === 'btc') || tokens[0];
  
  if (!token) {
    console.error('No tokens found in wallet');
    return;
  }
  
  // Update token details
  const tokenIcon = document.getElementById('receive-token-icon');
  const tokenName = document.getElementById('receive-token-name');
  const bitcoinWarning = document.getElementById('bitcoin-warning');
  
  if (tokenIcon) tokenIcon.src = getTokenLogoUrl(token.id);
  if (tokenName) tokenName.textContent = token.symbol;
  
  // Show/hide Bitcoin warning
  if (bitcoinWarning) {
    if (token.id === 'btc') {
      bitcoinWarning.classList.remove('hidden');
    } else {
      bitcoinWarning.classList.add('hidden');
    }
  }
  
  // Hide all screens
  document.querySelectorAll('.screen').forEach(screen => {
    screen.style.display = 'none';
    screen.classList.add('hidden');
  });
  
  // Show receive screen
  receiveScreen.style.display = 'flex';
  receiveScreen.classList.remove('hidden');
  
  console.log('Receive screen displayed successfully');
}

// FIX 4: Connect to History button in navbar
function fixHistoryButton() {
  const historyButton = document.querySelector('.quick-actions .action-circle:nth-child(5)');
  if (historyButton) {
    // Remove existing listeners to avoid duplicates
    const newButton = historyButton.cloneNode(true);
    historyButton.parentNode.replaceChild(newButton, historyButton);
    
    // Add new listener
    newButton.addEventListener('click', function() {
      console.log('History button clicked');
      
      // Hide all screens
      document.querySelectorAll('.screen').forEach(screen => {
        screen.style.display = 'none';
        screen.classList.add('hidden');
      });
      
      // Show history screen
      const historyScreen = document.getElementById('history-screen');
      if (!historyScreen) {
        console.error('History screen not found, rebuilding...');
        rebuildHistoryScreen();
        
        // Try to get it again after rebuilding
        const newHistoryScreen = document.getElementById('history-screen');
        if (!newHistoryScreen) {
          console.error('Failed to rebuild history screen');
          return;
        }
        
        newHistoryScreen.style.display = 'flex';
        newHistoryScreen.classList.remove('hidden');
      } else {
        historyScreen.style.display = 'flex';
        historyScreen.classList.remove('hidden');
      }
    });
  }
}

// FIX 5: Ensure getTokenLogoUrl function exists
function ensureTokenLogoFunction() {
  if (typeof window.getTokenLogoUrl !== 'function') {
    window.getTokenLogoUrl = function(tokenId) {
      const logoUrls = {
        'btc': 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',
        'eth': 'https://cryptologos.cc/logos/ethereum-eth-logo.png',
        'bnb': 'https://cryptologos.cc/logos/bnb-bnb-logo.png',
        'usdt': 'https://cryptologos.cc/logos/tether-usdt-logo.png',
        'twt': 'https://i.ibb.co/NdQ4xthx/Screenshot-2025-03-25-031716.png',
        'pol': 'https://cryptologos.cc/logos/polygon-matic-logo.png',
        'xrp': 'https://cryptologos.cc/logos/xrp-xrp-logo.png',
        'trx': 'https://cryptologos.cc/logos/tron-trx-logo.png'
      };
      return logoUrls[tokenId] || 'https://cryptologos.cc/logos/default-logo.png';
    };
    
    console.log('getTokenLogoUrl function created');
  }
}

// MAIN FUNCTION: Apply all fixes
function applyAllFixes() {
  console.log('Applying all fixes...');
  
  // Ensure token logo function exists
  ensureTokenLogoFunction();
  
  // Rebuild both screens
  rebuildHistoryScreen();
  rebuildReceiveScreen();
  
  // Fix the history button
  fixHistoryButton();
  
  // Replace the showReceiveScreen function
  window.showReceiveScreen = showReceiveScreen;
  
  // Fix bottom tabs if needed
  const bottomTabs = document.querySelector('.bottom-tabs');
  if (bottomTabs) {
    // Move to end of document to ensure proper stacking
    document.body.appendChild(bottomTabs);
    
    // Apply important styles
    bottomTabs.setAttribute('style', 
      'display: flex !important; ' +
      'position: fixed !important; ' +
      'bottom: 0 !important; ' +
      'left: 0 !important; ' +
      'width: 100% !important; ' +
      'height: 60px !important; ' +
      'visibility: visible !important; ' +
      'opacity: 1 !important; ' + 
      'z-index: 10000 !important; ' +
      'pointer-events: auto !important; ' +
      'background-color: #FFFFFF !important; ' +
      'border-top: 1px solid #F5F5F5 !important;');
  }
  
  console.log('All fixes applied successfully!');
}

// Apply fixes as soon as the DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  // Add a small delay to ensure everything is loaded
  setTimeout(applyAllFixes, 300);
});

// For immediate testing in the console, you can run:
// applyAllFixes();
